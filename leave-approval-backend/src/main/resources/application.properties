# 服务器端口
server.port=8080

# 数据库连接配置
spring.datasource.url=jdbc:mysql://localhost:3306/leave_approval_system?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
# 替换为你的 MySQL 用户名
spring.datasource.username=root
# 替换为你的 MySQL 密码
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate 配置
# 开发阶段用 update，会自动根据实体类更新表结构；
# 生产环境建议用 validate 或 none，并使用 Flyway/Liquibase 管理 schema
spring.jpa.hibernate.ddl-auto=update
# 在控制台显示执行的 SQL 语句，方便调试
spring.jpa.show-sql=true
# 格式化 SQL 输出
spring.jpa.properties.hibernate.format_sql=true
# (通常Spring Boot会自动检测，但显式指定更好)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# JWT Configuration
# ！！！重要！！！: 下面的 jwtSecret 只是一个示例，请务必替换为一个你自己生成的、
# 足够长且复杂的随机字符串（例如，至少64个字符，包含大小写字母、数字和特殊符号）。
# 不要直接使用这个示例密钥。
app.jwtSecret=your_very_long_and_super_secret_and_random_jwt_secret_key_here_replace_this_!@#$%^&*()_+
# 24 hours in milliseconds (86400 * 1000)
app.jwtExpirationMs=86400000

# Spring Security (可选，初期可以先不配置复杂的规则)
# 我们已经通过 SecurityConfig.java 进行了更详细的配置，所以这些默认内存用户可以注释掉
# spring.security.user.name=user
# spring.security.user.password=password
# spring.security.user.roles=USER

# Lombok (如果使用)
# (不需要在此文件额外配置，确保 IDE 安装了 Lombok 插件并启用了注解处理器)